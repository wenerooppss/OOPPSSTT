/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x20, 0x20, 0x56fa, 0x4ef6, 0x7248, 0x672c, 0xa, 0x20, 0x20, 0x63a7, 0x5236, 0x76d2, 0x7248, 0x672c, 0xa, 0x20, 0x20, 0x706f, 0x4f53, 0x7248, 0x672c, 0xa, 0x6700, 0x65b0, 0x56fa, 0x4ef6, 0x66f4, 0x65b0, 0x4e8e, 0xff1a, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x30, 0x35, 0x2d, 0x33, 0x31, 0x0, // @0 "  ????\n  ?????\n  ????\n????????2023-05-31"
    0x20, 0x2, 0x20, 0x25, 0x20, 0x0, // @41 " <> % "
    0x2, 0x20, 0x4b, 0x20, 0x0, // @47 "<> K "
    0x2, 0x4b, 0x0, // @52 "<>K"
    0x44, 0x4d, 0x58, 0x8bb0, 0x5fc6, 0x529f, 0x80fd, 0x0, // @55 "DMX????"
    0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x0, // @63 "English"
    0x84dd, 0x7259, 0x91cd, 0x7f6e, 0x2d, 0x3e, 0x0, // @71 "????->"
    0x44, 0x4d, 0x58, 0x5730, 0x5740, 0x0, // @78 "DMX??"
    0x44, 0x4d, 0x58, 0x6a21, 0x5f0f, 0x0, // @84 "DMX??"
    0x6f14, 0x64ad, 0x5ba4, 0x6a21, 0x5f0f, 0x0, // @90 "?????"
    0x20, 0x31, 0x35, 0x20, 0x0, // @96 " 15 "
    0x32, 0x37, 0x30, 0x30, 0x0, // @101 "2700"
    0x5347, 0x7ea7, 0x56fa, 0x4ef6, 0x0, // @106 "????"
    0x63a7, 0x5236, 0x7cfb, 0x7edf, 0x0, // @111 "????"
    0x7b80, 0x4f53, 0x4e2d, 0x6587, 0x0, // @116 "????"
    0x7cfb, 0x7edf, 0x66f4, 0x65b0, 0x0, // @121 "????"
    0x84dd, 0x7259, 0x6a21, 0x5f0f, 0x0, // @126 "????"
    0x8bed, 0x8a00, 0x6a21, 0x5f0f, 0x0, // @131 "????"
    0x8c03, 0x5149, 0x66f2, 0x7ebf, 0x0, // @136 "????"
    0x98ce, 0x6247, 0x6a21, 0x5f0f, 0x0, // @141 "????"
    0x20, 0x31, 0x35, 0x0, // @146 " 15"
    0x43, 0x43, 0x54, 0x0, // @150 "CCT"
    0x5bf9, 0x6570, 0x578b, 0x0, // @154 "???"
    0x6307, 0x6570, 0x578b, 0x0, // @158 "???"
    0x53, 0x578b, 0x0, // @162 "S?"
    0x4e2d, 0x901f, 0x0, // @165 "??"
    0x4eae, 0x5ea6, 0x0, // @168 "??"
    0x667a, 0x80fd, 0x0, // @171 "??"
    0x7279, 0x6548, 0x0, // @174 "??"
    0x7ebf, 0x578b, 0x0, // @177 "??"
    0x8272, 0x6e29, 0x0, // @180 "??"
    0x83dc, 0x5355, 0x0, // @183 "??"
    0x84dd, 0x7259, 0x0, // @186 "??"
    0x8bed, 0x8a00, 0x0, // @189 "??"
    0x9759, 0x97f3, 0x0, // @192 "??"
    0x9891, 0x7387, 0x0, // @195 "??"
    0x9ad8, 0x901f, 0x0 // @198 "??"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
